#lang racket

;; make-tree
(define (make-tree entry left right)
  (list entry left right))
(define (entry tree)
  (car tree))
(define (left-branch tree)
  (cadr tree))
(define (right-branch tree)
  (caddr tree))

;; list->tree
(define (list->tree elements)
  (car (partial-tree elements (length elements))))
(define (partial-tree elts n)
  (if (= n 0)
      (cons '() elts)
      (let ((left-size (quotient (- n 1) 2)))
        (let ((left-result (partial-tree elts left-size)))
          (let ((left-tree (car left-result))
                (non-left-elts (cdr left-result))
                (right-size (- n (+ left-size 1))))
            (let ((this-entry (car non-left-elts))
                  (right-result (partial-tree (cdr non-left-elts)
                                              right-size)))
              (let ((right-tree (car right-result))
                    (remaining-elts (cdr right-result)))
                (cons (make-tree this-entry left-tree right-tree)
                      remaining-elts))))))))
;; tree->list
(define (tree->list tree)
  (define (copy-to-list tree result-list)
    (if (null? tree)
        result-list
        (copy-to-list (left-branch tree)
                      (cons (entry tree)
                            (copy-to-list (right-branch tree)
                                          result-list)))))
  (copy-to-list tree '()))

(define (union-set set1 set2)
  (list->tree (cond ((null? set1) set2)
                    ((null? set2) set1)
                    (else (cond ((= (entry set1) (entry set2))
                                 (make-tree (entry set1)
                                            (union-set (left-branch set1)
                                                       (left-branch set2))
                                            (union-set (right-branch set1)
                                                       (right-branch set2))))
                                ((< (entry set1) (entry set2))
                                 (make-tree (entry set2)
                                            (union-set (make-tree (entry set1) (left-branch set1) '())
                                                       (left-branch set2))
                                            (union-set (right-branch set1)
                                                       (right-branch set2))))
                                ((> (entry set1) (entry set2))
                                 (make-tree (entry set1)
                                            (union-set (left-branch set1)
                                                       (left-branch set2))
                                            (union-set (right-branch set1)
                                                       (make-tree (entry set2) '() (right-branch set2))))))))))

(define test (union-set (list->tree '(1 2 3 4)) (list->tree '(3 4 5 6))))
test
(tree->list test)
